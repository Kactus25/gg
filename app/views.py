from multiprocessing.connection import answer_challenge
from unicodedata import name
from django.shortcuts import render
from django.http import HttpResponse


apps = 0
des = 0
back = 0
front = 0
game = 0

def index(request):
    return render(request, "main.html")

def start(request):
    global apps, des, back, front, game
    apps = 0
    des = 0
    back = 0
    front = 0
    game = 0
    return render(request, "q1.html")

def score(a, d, b, f, g ):
    global apps, des, back, front, game
    apps += a
    des += d
    back += b
    front += f
    game += g

alltext = ['''DESKTOP DEVELOPER

Desktop Developer — разработчик настольного программного обеспечения для целого спектра продуктов Microsoft с ОС Windows 10: компьютеры, планшеты, устройства интернета вещей, мобильные устройства.
 
Первая задача разработчика – понять эту идею и то, чего клиент хочет достичь с помощью приложения. Это нужно, чтобы определить, как должна выглядеть реализация идеи. Затем разработчик приложения продумывает техническую осуществимость, консультируется с UX-дизайнерами, разработчиками пользовательского интерфейса и другими программистами, после чего приступают к работе.

Также мобильный разработчик проверяет, правильно ли связаны интерфейс и серверная часть приложения. Другая задача – дальнейшее развитие концепций существующих приложений.  

Основные инструменты desktop разработчика:
Java, C#, C++, Python, WPFmWP
''',
'''
ВЕБ-ДИЗАЙНЕР

Веб-дизайнер рисует макеты лендингов, сайтов для компаний, интернет-магазинов, а также проектирует интерфейсы для интернет-сервисов и приложений. Также он может создавать шаблоны для email-рассылок, придумывать и рисовать интернет-баннеры.

Рабочий процесс веб-дизайнера выглядит так:

Дизайнер получает данные от заказчика — почему нужен именно сайт, какую задачу он должен решить, как он будет работать, какие пользователи будут на него заходить. Также дизайнер должен сам расспросить у клиента о его задачах, чтобы точно понять, что и для чего он делает.

Создаёт наброски будущего сайта. На этом этапе они больше похожи на схемы, где указывается расположение основных элементов на страницах сайта и пользовательские сценарии.

Делает прототип сайта. Дизайнер работает над эстетикой, дорабатывает пользовательские сценарии и утверждает работу у клиента.

Готовит макет к разработке. Чтобы разработчики могли понять, как должен работать будущий сайт, дизайнер пишет подробное техническое задание. Также в процессе дизайнер остаётся на связи с программистами, отвечает на их вопросы и следит за итоговым результатом.

Под словом «дизайн» люди часто понимают только эстетику продукта. На самом деле дизайнер — проектировщик и аналитик, который создаёт простые и понятные продукты на основе своих знаний о потенциальных пользователях. Поэтому он должен уметь анализировать информацию, разговаривать с клиентами и работать со смыслами в тексте.

Базовый софт — Figma. Сейчас это самая популярная программа для дизайна сайтов.

Для начала советуем обратить внимание на UX/UI-дизайн, моушн-дизайн, брендинг и создание логотипов,

UX/UI — это дизайн интерфейсов. Притом не только для сайтов, но и для приложений и компьютерных программ.
''',
'''BACK-END РАЗРАБОТЧИК 

Бэк-энд разработчик — это специалист, который занимается программно-административной частью веб-приложения, внутренним содержанием системы, серверными технологиями — базой данных, архитектурой, программной логикой. Этот опытный специалист должен иметь высшее техническое образование, первоклассные знания и опыт работы в сфере IT-технологий.

Backend-разработчик – это интересная и перспективная профессия для тех, кого интересуют информатика и математика. Чтобы создать полноценный, красивый, функциональный и удобный для пользователя сайт, необходима согласованная работа фронт-энд и бэк-энд разработчиков (frontend —  это все то, что браузер может читать, выводить на экран, а backend — все, что работает на сервере).

Основные инструменты бэк-енд разработчика — серверные языки программирования: такие как PHP, Python, Ruby, Java, Perl, Node JS (программная платформа). 

В функции back-end девелопера входят:

- Контроль за состоянием серверов (боевого, тестового и рабочего).
- Разработка приложений, поддерживающих пользовательский интерфейс и безопасность.
- Контроль версий, базы данных, непрерывной интеграции.
- Проектирование архитектуры сервиса.
- Разработка платформы и основного функционала.
- Создание ядра сайта.
- Работа с архитектурой кода.
''',
'''
FRONT-END РАЗРАБОТЧИК

FrontEnd разработчик создает видимую для пользователя часть веб-страницы и его главная задача – точно передать в верстке то, что создал дизайнер, а также реализовать пользовательскую логику. Для того, чтобы стать FrontEnd разработчиком, не нужны знания математики. 

Фронт-энд разработчик в web отвечает за то, чтобы страницы сайта выглядели во всех браузерах одинаково и соответствовали макету дизайнера. С появлением новых средств разработки и более современных браузеров эта задача решается проще, чем раньше.

Но интерфейсы современных сайтов или интернет-сервисов становятся более сложными, а многообразие устройств, с которых пользователи выходят в Сеть, постоянно расширяется — например, к десктопам и ноутбукам добавились планшеты, смартфоны. 

Поэтому фронт-энд разработчику очень важно, как и любому программисту, постоянно находиться в курсе всех новшеств и фишек, чтобы успешно адаптировать сайты под новые устройства.

Основные инструменты фронт-энд разработчика в web:
JavaScript, HTML, CSS.

Есть много дополнительных инструментов, которые автоматизируют рутинную часть работы:
Sass/SCSS, LESS, Bootstrap (три ведущих фреймворка);
React, Angular, Vue.js, jQuery, Webpack,Gulp.''',
'''
GAMEDEV

Разработчик игр, или gamedev, занимается созданием программного кода, визуализацией и концепцией игры для ПК, мобильных телефонов, консолей и других гаджетов, выбирает средства и инструменты для решения поставленных задач. Gamedev может работать как самостоятельно, так и в команде.

Игровых девелоперов условно можно разделить на несколько групп:

- Настоящие мастера, которые делают популярные игры в известных компаниях;
- Профессионалы, создающие качественные продукты среднего сегмента;
- Создатели простых игр (браузерных, мобильных и других);
- Геймеры и любители, которые выпускают дополнения и индии-игры.


Больше всего в геймдеве используются:

C++, C#, Objective-C, Java, Python (массовые многопользовательские мобильные игры).
С++, C# (для графической разработки на Unity).
C, C++ (большие игры на UE – Unreal Engine).
Python (для Panda 3D, Blender Game Engine, PYGame).
C#, Java (игры на Unity).
PHP, JavaScript (браузерные).
Swift (для iOS).
Java/Kotlin (для Android).

Gamedev – универсальный специалист, который должен уметь создавать анимацию, визуальные эффекты, концепцию игры, дизайн, знать основы моделирования и юриспруденции. Да, геймдев-разработчик, если он работает на себя, должен уметь не только защитить, но и запатентовать разработанную игру или ПО для нее.
''']

abstext = []
for i in range(len(alltext)):
    abstext.append(alltext[i].split('\n'))

def questions(request):
    answer1 = request.POST.get("q1ans", "-")

    global apps, des, back, front, game

    if(answer1 == "1"):
        score(1, 1, 0, 0, 1)
    if(answer1 == "2"):
        score(1, 0, 1, 0, 0)
    if(answer1 == "3"):
        score(1, 1, 1, 0, 1)
    if(answer1 == "4"):
        score(0, 1, 0, 0, 1)

    answer2 = request.POST.get("q2ans", "-")
    if(answer2 == "1"):
        score(1, 0, 1, 0, 1)
    if(answer2 == "2"):
        score(0, 1, 0, 0, 0)   
    if(answer2 == "3"):
        score(1, 0, 0, 1, 0)
    if(answer2 == "4"):
        score(1, 0, 0, 1, 1)    
    
    answer3 = request.POST.get("q3ans", "-")
    if(answer3 == "1"):
        score(0, 1, 1, 0, 0)
    if(answer3 == "2"):
        score(0, 0, 0, 1, 1) 
    if(answer3 == "3"):
        score(0, 0, 0, 1, 0) 
    
    answer4 = request.POST.get("q4ans", "-")
    if(answer4 == "1"):
        score(1, 1, 1, 0, 0) 
    if(answer4 == "2"):
        score(1, 0, 1, 0, 1) 
    if(answer4 == "3"):
        score(0, 0, 0, 1, 1) 
    if(answer4 == "4"):
        score(1, 1, 1, 0, 1) 

    answer5 = request.POST.get("q5ans", "-")
    if(answer5 == "1"):
        score(1, 1, 1, 0, 1) 
    if(answer5 == "2"):
        score(1, 0, 1, 0, 1)   
    if(answer5 == "3"):
        score(0, 0, 0, 1, 1) 
    if(answer5 == "4"):
        score(1, 1, 1, 0, 1) 

    answer6 = request.POST.get("q6ans", "-")
    if(answer6 == "1"):
        score(0, 1, 0, 0, 1) 
    if(answer6 == "2"):
        score(0, 0, 0, 1, 0)   
    if(answer6 == "3"):
        score(1, 0, 0, 0, 0) 
    if(answer6 == "4"):
        score(0, 0, 1, 0, 0) 

    answer7 = request.POST.get("q7ans", "-")
    if(answer7 == "1"):
        score(1, 0, 0, 0, 1) 
    if(answer7 == "2"):
        score(0, 0, 1, 0, 0)   
    if(answer7 == "3"):
        score(1, 1, 0, 0, 1) 
    if(answer7 == "4"):
        score(1, 1, 0, 1, 0) 
    
    answer8 = request.POST.get("q8ans", "-")
    if(answer8 == "1"):
        score(1, 1, 0, 0, 1) 
    if(answer8 == "2"):
        score(1, 1, 0, 0, 0)   
    if(answer8 == "3"):
        score(0, 0, 1, 1, 0) 

    answer9 = request.POST.get("q9ans", "-")
    if(answer9 == "1"):
        score(0, 1, 0, 1, 0) 
    if(answer9 == "2"):
        score(0, 0, 1, 0, 0)   
    if(answer9 == "3"):
        score(1, 1, 0, 0, 1) 

    answer10 = request.POST.get("q10ans", "-")
    if(answer10 == "1"):
        score(1, 0, 0, 0, 1) 
    if(answer10 == "2"):
        score(0, 0, 1, 0, 0)   
    if(answer10 == "3"):
        score(0, 0, 0, 1, 0)
    if(answer10 == "4"):
        score(0, 1, 0, 0, 0)  
    
    answer11 = request.POST.get("q11ans", "-")
    if(answer11 == "1"):
        score(1, 0, 1, 0, 0) 
    if(answer11 == "2"):
        score(0, 0, 0, 0, 1)   
    if(answer11 == "3"):
        score(0, 1, 0, 1, 0)
        
    res = {} 
    res = result()
    reslength = len(res)

    outtext = []
    begintext = "У вас есть предрасположенность к "
    
    for i in res:
        if i == "apps":
            begintext += "созданию приложений, "
            for j in abstext[0]:
                outtext.append(j)
        if i == "des":
            begintext += "веб-дизайну, "
            for j in abstext[1]:
                outtext.append(j)
        if i == "back":
            begintext += "бэк-энду, "
            for j in abstext[2]:
                outtext.append(j)
        if i == "front":
            begintext += "фронт-энду, "
            for j in abstext[3]:
                outtext.append(j)
        if i == "game":
            begintext += "разработке игр, "
            for j in abstext[4]:
                outtext.append(j)
    begintext = (begintext[0:-2] + '.')
    
    data = {"begintext" : begintext, "outtext": outtext, "reslength" : reslength, "res" : res,"apps" : apps, "des" : des, "back" : back, "front" : front, "game" : game, "abstext" : abstext} 
    return render(request, "result.html", context=data)

def result():
    global apps, des, back, front, game
    mas = {"apps" : apps, "des" : des, "back" : back, "front" : front, "game" : game}
    maxkey = (max(mas, key=mas.get))#Создаём массив отсартированый по значениям
    maxval = (mas[maxkey])
    mas2 = {maxkey : maxval}#второй словарь с уже заданным максимальным ключом и значением
    for i, j in mas.items():
        if(maxkey != i and maxval == j):#Смотрим есть ли такое же значение в mas у другого ключа
            mas2.update({i : j})
    return mas2